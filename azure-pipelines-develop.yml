### Develop Pipeline
### Snapshot Branch Versioning Stategy: X.X.X-SNAPSHOT
### Project :: kmdp-trisotech-asset-repository-service

# !! Downstream Build: knew-serviceprofile-editor-impl !! #

trigger: 
  branches:
    include:
      - develop
    exclude:
      - feature*
  paths:
    exclude:
      - azure-pipelines-develop.yml
      - azure-pipelines-features.yml
      - release-notes.md
      - README.md

# Watches upstream build for success to run
resources:
  pipelines:
  - pipeline: kmdpTrisotechAssetRepositoryServiceDevelop
    source: knewServiceprofileEditorImplDevelop
    trigger: 
      branches:
      - develop
  - pipeline: kmdpTrisotechAssetRepositoryServiceDevelop
    source: kmdpTrisotechAssetRepositoryServiceMaster
    trigger: 
      branches:
      - develop
   
# Sets Virtual Machine to Run Pipeline on
pool:
  vmImage: 'ubuntu-latest'

# Gets Variables from Azure DevOps Library
variables: 
  - group: kmdp-platform-variables

# ------------------ PIPELINE STEPS  ------------------
steps:
# Outputs pipeline steps have started
- script: |
    echo Starting Develop Branch Build Pipeline!
    echo Project :: kmdp-trisotech-asset-repository-service
  displayName: 'Starting Pipeline Steps'

# Reads Root pom.xml File
# Gets/Sets GAV from POM to Pipeline Variables
- task: PowerShell@2
  displayName: 'Get/Set POM Variables'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$pomXml = Get-Content .\pom.xml
      Write-Host --------------------------------
      Write-Host POM Variables:
      Write-Host GroupId: $pomXml.project.groupId
      Write-Host ArtifactId: $pomXml.project.artifactId
      Write-Host Version: $pomXml.project.version
      Write-Host --------------------------------
      Write-Host Setting GAV to local task variables
      $groupId=$pomXml.project.groupId
      $artifactId=$pomXml.project.artifactId
      $version=$pomXml.project.version
      Write-Host --------------------------------
      Write-Host Setting GAV to pipeline variables
      Write-Host "##vso[task.setvariable variable=projectSnapShotVersion]$version"
      Write-Host "##vso[task.setvariable variable=projectGroupId]$groupId"
      Write-Host "##vso[task.setvariable variable=projectArtifactId]$artifactId"

# Gets .m2 Settings File from Azure DevOps Library
# Downloads File for use in Pipeline
- task: DownloadSecureFile@1
  displayName: 'Downloads Secure .m2 Settings File'
  name: settingsxml
  inputs:
    secureFile: settings-dev.xml

# Write settings file to Build Server
- task: PowerShell@2
  displayName: 'Update m2 Settings File'
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Type Directory -Force "${HOME}/.m2"
      Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"

# Authenticate to Maven Feed 
- task: MavenAuthenticate@0
  displayName: 'Maven Authenticate'
  inputs:
    artifactsFeeds: 'KMD'

# Sets JDK 11 for Pipeline
# Runs Maven Goal: validate
- task: Maven@3
  displayName: 'Sets Pipeline to JDK 11'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'validate'
    options: '-ntp'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'

# SLM Versioning Policy (Preprod)
- task: AlmVersioning@4
  displayName: 'SLM Update Version and Build Number'
  inputs:
    projectType: java
    versionFilePath: kmdp-trisotech-asset-repository-service-impl/pom.xml
    versionTransformation: 'preprod'

# Update Build Number by removing Snapshots
- task: PowerShell@2
  displayName: 'Update Build # Remove Snapshot'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host AfterSlmBuild: $Env:BUILD_BUILDNUMBER
      $buildNumber = $Env:BUILD_BUILDNUMBER
      $finalBuildNumber = $buildNumber.replace("-SNAPSHOT","")
      Write-Host AfterSLMBuildRemoveSnap: $finalBuildNumber
      Write-Host "##vso[build.updatebuildnumber]$finalBuildNumber"
  env:
    BUILD_BUILDNUMBER: $(build.buildNumber)

# Retrieve SLM preprod version
- task: PowerShell@2
  displayName: 'Retrieve SLM Preprod Version'
  inputs:
    targetType: 'inline'
    script: |
        Write-Host ALM Version: $env:ALM_VERSION
        $projectSlmVersion=$env:ALM_VERSION.replace("-SNAPSHOT","")
        Write-Host Project Version: $projectSlmVersion
        Write-Host "##vso[task.setvariable variable=projectSlmVersionFinal]$projectSlmVersion"
  env:
    ALM_VERSION: $(AlmVersioning.Project.Version)

# Set Version of Deployable War
- task: PowerShell@2
  displayName: 'Maven Set Version Deployable War'
  inputs:
    targetType: 'inline'
    script: |
        mvn versions:set -pl kmdp-trisotech-asset-repository-service-impl "-DnewVersion=$env:PROJECT_SLM_VERSION" -ntp
  env:
    PROJECT_SLM_VERSION: $(projectSlmVersionFinal)

# GitHub Super-Linter
- script: |
    mkdir super-linter.report
    docker pull github/super-linter:latest
    docker run -e RUN_LOCAL=true -e DISABLE_ERRORS=true -e OUTPUT_DETAILS=detailed -e OUTPUT_FORMAT=tap -v $(System.DefaultWorkingDirectory):/tmp/lint/ --name my-vol github/super-linter
    docker cp my-vol:/tmp/lint/super-linter.report $(build.artifactstagingdirectory)
  displayName: 'Code Scan using GitHub Super-Linter'

# Publish GitHub Results to Azure Pipelines
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: githublinter
  condition: succeededOrFailed()

# Maven project clean package using refresh profile
- task: PowerShell@2
  displayName: 'Maven Clean Package'
  inputs:
    targetType: 'inline'
    script: |
        mvn clean package "-Dspring.profiles.active=dev" "-Dedu.mayo.kmdp.trisotechwrapper.repositoryName=$env:TRISO_REPO_DEV_NAME" "-Dedu.mayo.kmdp.trisotechwrapper.repositoryId=$env:TRISO_REPO_DEV_ID" "-Dedu.mayo.kmdp.trisotechwrapper.trisotechToken=$env:TRISO_DEV_TOKEN" -ntp
  env:
    TRISO_REPO_DEV_NAME: $(trisoRepoDevName)
    TRISO_REPO_DEV_ID: $(trisoRepoDevId)
    TRISO_DEV_TOKEN: $(trisoDevToken)

# Deploy maven using trisotech tokens
- task: PowerShell@2
  displayName: 'Maven Deploy'
  inputs:
    targetType: 'inline'
    script: |
        mvn deploy "-DaltDeploymentRepository=KMD::default::https://pkgs.dev.azure.com/mclm/_packaging/KMD/maven/v1" "-Dspring.profiles.active=dev" "-Dedu.mayo.kmdp.trisotechwrapper.repositoryName=$env:TRISO_REPO_DEV_NAME" "-Dedu.mayo.kmdp.trisotechwrapper.repositoryId=$env:TRISO_REPO_DEV_ID" "-Dedu.mayo.kmdp.trisotechwrapper.trisotechToken=$env:TRISO_DEV_TOKEN" -ntp
  env:
    TRISO_REPO_DEV_NAME: $(trisoRepoDevName)
    TRISO_REPO_DEV_ID: $(trisoRepoDevId)
    TRISO_DEV_TOKEN: $(trisoDevToken)

# Copy War File to build
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: |
        **/*.war
      TargetFolder: '$(build.artifactstagingdirectory)'

# Export Variables
- task: ImportExportVariables@1
  displayName: 'Export Build Variables'
  inputs:
    action: 'Export'

# Publish to Azure Pipelines
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: deploy
  condition: succeededOrFailed()

# ------------------ END PIPELINE  ------------------
# Outputs pipeline steps have ended
- script: |
    echo Ending Develop Branch Pipeline!
  displayName: 'Ending Pipeline Steps' 